namespace FactoryMethod
{
    public abstract class Creator
    {
        // Обратите внимание, что Создатель может также обеспечить реализацию
        // фабричного метода по умолчанию.
        public abstract IProduct FactoryMethod();

        // Также заметьте, что, несмотря на название, основная обязанность
        // Создателя не заключается в создании продуктов. Обычно он содержит
        // некоторую базовую бизнес-логику, которая основана  на объектах
        // Продуктов, возвращаемых фабричным методом.  Подклассы могут косвенно
        // изменять эту бизнес-логику, переопределяя фабричный метод и возвращая
        // из него другой тип продукта.
        public string SomeOperation()
        {
            // Вызываем фабричный метод, чтобы получить объект-продукт.
            var product = FactoryMethod();
            // Далее, работаем с этим продуктом.
            var result = "Creator: The same creator's code has just worked with "
                         + product.Operation();

            return result;
        }

        //-----------------------------------------------------------------------

        // Конкретные Создатели переопределяют фабричный метод для того, чтобы
        // изменить тип результирующего продукта.
        public class ConcreteCreator1 : Creator
        {
            // Обратите внимание, что сигнатура метода по-прежнему использует тип
            // абстрактного продукта, хотя  фактически из метода возвращается
            // конкретный продукт. Таким образом, Создатель может оставаться
            // независимым от конкретных классов продуктов.
            public override IProduct FactoryMethod()
            {
                return new ConcreteProduct1();
            }
        }

        //-----------------------------------------------------------------------

        public class ConcreteCreator2 : Creator
        {
            public override IProduct FactoryMethod()
            {
                return new ConcreteProduct2();
            }
        }
    }
}